on:
  push:
    branches:
      - main

env:
  NODE_VERSION: '14.x'
  PROJECT_NAME: 'project-starter'

jobs:
  validate-code:
    name: 'Validate Pull Request'
    timeout-minutes: 10
    runs-on: ubuntu-latest
    container: node:14.17-stretch
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile
      - name: 'Audit dependencies'
        run: /bin/sh -c 'yarn audit --level high; [[ $? -ge 8 ]] && exit 1 || exit 0'
      - name: 'Check typings'
        run: yarn typecheck
      - name: 'Check code with Prettier'
        run: yarn format:check
      - name: 'Check code with ESLint'
        run: yarn lint:check
      - name: 'Build Application'
        run: yarn build

  build-container-and-push-to-registry:
    name: 'Build container and push to registry'
    runs-on: ubuntu-latest
    needs: validate-code
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Setup ENV
        id: env
        run: |
          echo "::set-output name=RELEASE::$(cat package.json|jq -r --arg name $APP_NAME --arg build $APP_BRANCH '$name+":"+.version+"-"+$build')"

      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile

      - name: 'Build Application'
        run: yarn build

      - name: 'Remove and install only production dependencies'
        run: rm -rf node_modules && yarn install --production --frozen-lockfile

      - name: 'Build container image'
        env:
          RELEASE: ${{ steps.env.outputs.RELEASE }}
          IMAGE_TAG: ${{ github.sha }}
        run: docker build --build-arg RELEASE_TAG::${{ steps.env.outputs.RELEASE_TAG }} -t ${{env.PROJECT_NAME}}:latest .

      - name: 'Tag image with last github sha'
        run: |
          docker tag ${{env.PROJECT_NAME}}:latest ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: 'Login to ECR'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 'Push image to ECR'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: master
        run: |
          docker push ${{ secrets._URI }}:${{ github.sha }}
          docker push ${{ secrets._URI }}:latest

  update-http-api-lambda:
    name: 'Update HTTP API lambda'
    runs-on: ubuntu-latest
    needs: build-container-and-push-to-registry
    steps:
      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: 'Update lambda'
        run: |
          aws lambda update-function-code --function-name ${{ secrets.HTTP_API_LAMBDA_NAME }} --image-uri ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }} --publish

  update-cron-lambda:
    name: 'Update CRON lambda'
    runs-on: ubuntu-latest
    needs: build-container-and-push-to-registry
    steps:
      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: 'Update lambda'
        run: |
          aws lambda update-function-code --function-name ${{ secrets.CRON_LAMBDA_NAME }} --image-uri ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }} --publish

  send-slack-notification:
    name: 'Send Slack notification'
    runs-on: ubuntu-latest
    needs: [update-http-api-lambda, update-cron-lambda]
    steps:
      - uses: actions/checkout@v2
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: 'Your BE deployer'
          SLACK_ICON_EMOJI: ':parrot_dance:'
          SLACK_TITLE: 'Deployment success :rocket:'
          SLACK_MESSAGE: 'Deployment pipeline finished successfuly'
